openapi: 3.0.0
info:
  description: >-
    Provides search capabilities at the claim level and predicts the credibility
    of input statements by comparing them to claims/statements in a database of
    fact-checked and news articles from both credible and non-credible
    publishers.
  version: "0.1.1"
  title: Claim Search and Credibility Prediction
  contact:
    email: rdenaux@expertsystem.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
    
tags:
  #- name: admins
  #  description: Secured Admin-only calls
  - name: developers
    description: Operations available to regular developers
  - name: planned
    description: Proposed endpoints
    
paths:
  /collections:
    get:
      tags:
        - developers
      summary: Returns collections ids that must be used in order to search documents.
      operationId: collections
      responses:
        '200':
          description: get collections that are stored in the database
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Collection'
  /url/collect:
    post:
      tags:
        - planned
      summary: On-the-fly crawling and analysis of documents based on their URLs
      operationId: urlCollect
      parameters:
      - in: query
        name: url
        description: URL to document to crawl and analyse. Multiple urls can be specified in a single POST request.
        required: true
        schema:
          type: string
      - in: query
        name: collection
        description: Name of the collection where the collected (and analysed) document should be stored. This should be one of the names as returned by the `/collections` service. If not specified, the server will assume a standard collection to use.
        required: false
        schema:
          type: string
      responses:
        '200':
          description: >-
            Responds *synchronously* and returns an object for each posted `url`. If there were errors resolving the URLs, extracting text or analysing the extracted content before adding to the database, this is reported as an error. Similarly, if after a timeout, the url has not been crawled/analysed, this is reported as a message. If the URL has been correctly crawled and analysed, the analysis is returned (following the same basic schema as a `/search` response.
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/URLCollectResponse'
        '400':
          description: Bad request due to incorrect target `collection`. If input URL cannot be resolved, this will be specified as part of the '200' response.
        '5XX':
          description: Unexpected error on the server.
  /user/accuracy-review:
    post:
      tags:
        - planned
      summary: POST a new accuracy review
      operationId: postUserAccuracyReview
      requestBody:
        description: Information about the user rating. Note that co-inform users can rate different items a tweet, a website, an person, an article, a sentence within a tweet/article or even a credibility rating made by the system.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserReview'
      responses:
        '200':
          description: >-
            Responds *synchronously* and returns the UserReview object as it was stored in the DB. This will typically be the same as the posted object, with some slight modifications and additions. For example, some fields may be normalised (e.g. whitespaces removed), other fields may be added with default values.
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/UserReviewResponse'
        '400':
          description: Bad request, this will be accompanied by a list of  validation errors.
        '5XX':
          description: Unexpected error on the server.
    get:
      tags:
        - planned
      summary: GET existing user accuracy reviews
      operationId: getUserAccuracyReviews
      description: Find existing user accuracy reviews.
      parameters:
        - in: query
          name: ratingValue
          schema:
            type: string
          description: return only reviews matching this ratingValue
        - in: query
          name: factCheckRequested
          schema:
            type: string
          examples:
            star:
              value: "*"
              summary: same as true
            true:
              value: true
              summary: returns reviews with recorded factcheck requests
            date:
              value: 2020-03-10T08:39:32.806Z
              summary: returns reviews with a recorded factcheck request after this date
          description: >-
            return only reviews for which a request to a factchecker was recorded. If the value is a date, it must be an ISO datetime. See the example.
      responses:
        '200':
          description: >-
            Returns a list of matching user ratings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserReviewResponse'

  /user/agg/accuracy-review:
    get:
      tags:
        - planned
      summary: GET aggregate information about an itemReviewed
      operationId: getUserAggregateAccuracyReview
      description: >-
        Find how many users reviewed a specific item directly or
        indirectly (by dis/agreeing with a system `CredibilityReview`)
      parameters:
        - in: query
          name: itemReviewed.url
          required: true
          schema:
            type: string
            format: url
          description: >-
            The item that was rated by users either directly or indirectly
          examples:
            tweet:
              value: "https://twitter.com/msara1973/status/889218085605040129"
              summary: URL for a tweet
            sentence:
              value: "http://coinform.eu/sentence?text=vaccines cause cancer"
              summary: URL for a sentence
      responses:
        '200':
          description: >-
            Returns an overview of users and their recent reviews for the itemReviewed
          content:
            application/json:
              schema:
                type: object
                required:
                  - response
                  - responseHeader
                properties:
                  response:
                    $ref: '#/components/schemas/UserAccuracyReviewsByReviewedItem'
                  responseHeader:
                    $ref: '#/components/schemas/ResponseHeader'
              examples:
                tweet:
                  summary: Users who reviewed a tweet
                  value:
                    responseHeader:
                      QTime: 851
                      params:
                        itemReviewed.url: "https://twitter.com/msara1973/status/889218085605040129"
                      status: 0
                    response:
                      itemReviewed.url: "https://twitter.com/msara1973/status/889218085605040129"
                      numUsersWhoRequestedFactcheck: 1
                      numUsersWhoReviewedItem: 3
                      type: CoinformUserAccuracyReviewsByReviewedItem
                      usersWhoRequestedFactcheck:
                        - author.url: "http://coinform.eu/user/2094970a-2b0d-4f1a-999c-d0a41b3c677f"
                          type: AuthorAndMostRecentReview
                          mostRecentAccuracyReview:
                            dateCreated: "2020-09-25T14:22:40.376Z"
                            name: accurate
                            reviewRating:
                              ratingValue: accurate
                            text: "it is true that Apollo 11 astronauts visited Ankara and Ataturks mausoleum in 1969. factcheckers link added"
                      usersWhoReviewedItem:
                        - author.url: "http://coinform.eu/user/2094970a-2b0d-4f1a-999c-d0a41b3c677f"
                          type: AuthorAndMostRecentReview
                          mostRecentAccuracyReview:
                            dateCreated: "2020-09-25T14:22:40.376Z"
                            name: accurate
                            reviewRating:
                              ratingValue: accurate
                            text: "it is true that Apollo 11 astronauts visited Ankara and Ataturks mausoleum in 1969. factcheckers link added"
                        - author.url: "http://coinform.eu/user/837a0f4f-0c20-42fa-b29c-68a03e5d46cd"
                          type: AuthorAndMostRecentReview
                          mostRecent(dis)agreeReview:
                            type: CoinformUserReview
                            dateCreated: "2020-09-23T06:35:03.909Z"
                            itemReviewed:
                              name: not_verifiable
                              url: "https://api.coinform.eu/response/ebb4efa1c465201d3c6d8eb9445854150d88c4614e5ab67eda0ce866928a7d59/x"
                            name: "inaccurate"
                            reviewRating:
                              ratingValue: inaccurate
                        - author.url: "http://coinform.eu/user/2094970a-2b0d-4f1a-999c-d0a41b3c677f"
                          type: AuthorAndMostRecentReview
                          mostRecent(dis)agreeReview:
                            type: CoinformUserReview
                            dateCreated: "2020-09-25T14:16:58.166Z"
                            itemReviewed: 
                              name: not_verifiable
                              url: "https://api.coinform.eu/response/ebb4efa1c465201d3c6d8eb9445854150d88c4614e5ab67eda0ce866928a7d59/x"
                            name: inaccurate
                            reviewRating:
                              ratingValue: inaccurate
                          

  /factchecker/recordRequest:
    post:
      tags:
        - planned
      summary: POST that a factcheck was requested from some factchecker
      operationId: postFactcheckerRecordRequest
      requestBody:
        description: Information about the fact-checker(s) for which a fact-check was requested and the item to review
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                factcheckers:
                  type: array
                  description: >-
                    A list of fact-checker organizations that were notified
                  items:
                    $ref: '#/components/schemas/Organization'
                itemToReview:
                  $ref: '#/components/schemas/ItemRef'
            examples:
              soma:
                summary: Sent a tweet to SOMA 
                value:
                  factcheckers:
                    - type: Organization
                      name: Truly-media
                      url: "http://truly.media"
                  itemToReview:
                    type: SocialMediaPosting
                    url: https://twitter.com/realDonaldTrump/status/1181172459325800448
      responses:
        '200':
          description: >-
            Responds *synchronously* and returns a summary of the changes in the DB.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Message about changes in the DB
              examples:
                ok:
                  value:
                    message: >-
                      Updated 2 UserReviews that had requested a review for https://twitter.com/realDonaldTrump/status/1181172459325800448
        '400':
          description: Bad request, this will be accompanied by a list of  validation errors.
        '5XX':
          description: Unexpected error on the server.

                
  /factchecker/review:
    post:
      tags:
        - planned
      summary: POST a new accuracy review by a 3rd party factchecker
      operationId: postFactcheckerAccuracyReview
      requestBody:
        description: Information about the fact-checker rating.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
            examples:
              somaReview:
                summary: Submit a SOMA review
                value:
                  context: http://schema.org
                  type: Review
                  url: http://truly.media/path/to/resource/for/this/review
                  author:
                    type: Organization
                    url: http://truly.media
                    name: Truly-media
                  text: >-
                    The Tweet is inaccurate because reasons
                  name: inaccurate
                  reviewAspect: accuracy
                  reviewRating:
                    context: http://schema.org
                    type: Rating
                    ratingValue: inaccurate
                    reviewAspect: accuracy
                    ratingExplanation: >-
                      The Tweet is inaccurate because reasons
                  itemReviewed:
                    type: SocialMediaPosting
                    url: https://twitter.com/realDonaldTrump/status/1181172459325800448
                  dateCreated: "2020-05-08T10:16:29.130Z"
      responses:
        '200':
          description: >-
            Responds *synchronously* and returns the Review object as it was stored in the DB. This will typically be the same as the posted object, with some slight modifications and additions. For example, some fields may be normalised (e.g. whitespaces removed), other fields may be added with default values.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      response:
                        $ref: '#/components/schemas/ReviewResponse'
                  
        '400':
          description: Bad request, this will be accompanied by a list of  validation errors.
        '5XX':
          description: Unexpected error on the server.
        
  /search:
    get:
      tags:
        - developers
      summary: Returns documents matching a query string. 
      operationId: search
      description: By passing in the appropriate options, you can search for available documents in the system or even filter them by facets. Every available query param has a q_or version to add or queries, following the format -> q_<field_name> and q_or_<field_name>.
      parameters:
      - in: query
        name: collection
        description: Collection of documents in the database.
        required: true
        schema:
          type: string
      - in: query
        name: q
        description: Basic query field that asks for the content field (content of the web page) in the database. If this parameter is specified more than one time, the system will generate a query with logical ands.
          For this type of query there is no special treatment, but it is recommended to use parenthesis if the query has spaces to reduce the number of documents returned. For example -> q=(Sun and Moon)
        required: false
        schema:
          type: string
      - in: query
        name: q_or
        description: Query param that asks for the content field and can be used to append logical ors to the actual query.
          For this type of query there is no special treatment, but it is recommended to use parenthesis if the query has spaces to reduce the number of documents returned.
        required: false
        schema:
          type: string
      - in: query
        name: facet.field
        description: Query param that asks for a field in particular. This param returns an additional json in the response, called "facet_counts". This json will show all the values used for the field used in the query.
          For this type of query there is no special treatment.
        schema:
          type: string
        required: false
      - in: query
        name: start
        description: Query param modifies the number of documents returned. Instead of showing the documents from index 0, the count will start in the number pointed by this parameter.
        schema:
          type: integer
        required: false
      - in: query
        name: rows
        description: Query param modifies the number of documents returned. Instead of showing the first 10 documents, it will show `rows` number of documents.
        schema:
          type: integer
        required: false
      - in: query
        name: q_content_orig
        description: Query param that asks for the content_orig field (content of the web page in the original language when it is not written in English). If this parameter is specified more than one time, the system will generate a query with logical ands.
          For this type of query there is no special treatment, but it is recommended to use parenthesis if the query has spaces to reduce the number of documents returned.
        schema:
          type: string
        required: false
      - in: query
        name: q_or_orig
        description: Query param that asks for the content_orig field and can be used to append logical ors to the actual query.
          For this type of query there is no special treatment, but it is recommended to use parenthesis if the query has spaces to reduce the number of documents returned.
        schema:
          type: string
        required: false
      - in: query
        name: q_lang_orig
        description: Query param that asks for the lang_orig field. If this parameter is specified more than one time, the system will generate a query with logical ands.
          For this type of query there is no special treatment, but it is recommended to use parenthesis if the query has spaces to reduce the number of documents returned.
        schema:
          type: string
        required: false
      - in: query
        name: q_content
        description: Query param that asks for the content field (explicitly declared). If this parameter is specified more than one time, the system will generate a query with logical ands.
          For this type of query there is no special treatment, but it is recommended to use parenthesis if the query has spaces to reduce the number of documents returned.
        schema:
          type: string
        required: false
      - in: query
        name: q_categories
        description: Query param that asks for taxonomies fields and can be used to append logical ands to the actual query. Taxonomies group general concepts in the documents, and are used to classify the data. If this parameter is specified more than one time, the system will generate a query with logical ands.
          For this type of field, quotes should always be added and try to search for a specific node or group in the taxonomy. For example -> q_categories:"/INTELLIGENCE_TAX/18000000/18021000"
        schema:
          type: string
        required: false
      - in: query
        name: q_main_elements
        description: Query param that asks for main_elements fields and can be used to append logical ands to the actual query. If this parameter is specified more than one time, the system will generate a query with logical ands. 
          The query string for this field should be a exact match, so quotes should be added or at least * expansors. If no expansors are added, the application will add them automatically.
        schema:
          type: string
        required: false
      - in: query
        name: q_id
        description: Query param that asks for the id field. This field specifies the web page url. If this parameter is specified more than one time, the system will generate a query with logical ands.
          For this type of query there is no special treatment, but it is recommended to use parenthesis if the query has spaces to reduce the number of documents returned.
        schema:
          type: string
        required: false
      - in: query
        name: q_digest
        description: Query param that asks for the digest field. This field specifies the md5 for a particular document. If this parameter is specified more than one time, the system will generate a query with logical ands.
          For this type of query there is no special treatment, but it is recommended to use parenthesis if the query has spaces to reduce the number of documents returned.
        schema:
          type: string
        required: false
      - in: query
        name: q_url
        description: Query param that asks for the url field. This field specifies the web page url aswell, but has a different treatment in comparison to q_id. If this parameter is specified more than one time, the system will generate a query with logical ands.
          For this type of query the url must be inside quotes or with bars escaped. For example q_url->"https://www.snopes.com/fact-check/" or q_url->https\:\/\/www.snopes.com\/fact-check\/
          In case of escaping the url, the result returns similar urls. In case of passing it with quotes, it returns only the documents that do an exact match with that url.
        schema:
          type: string
        required: false
      - in: query
        name: q_source
        description: Query param that asks for the source field. This field tells how the data was collected (via Twitter, web crawling...). If this parameter is specified more than one time, the system will generate a query with logical ands.
          For this type of query there is no special treatment, but it is recommended to use parenthesis if the query has spaces to reduce the number of documents returned.
        schema:
          type: string
        required: false
      - in: query
        name: q_source_id
        description: Query param that asks for source_id and can be used to append logical ands to the actual query. If this parameter is specified more than one time, the system will generate a query with logical ands. 
          The query string for this field should be a exact match, so quotes should be added or at least * expansors. If no expansors are added, the application will add them automatically.
        schema:
          type: string
        required: false
      - in: query
        name: q_title
        description: Query param that asks for the title field. The field stores the title of the web page or news crawled. If this parameter is specified more than one time, the system will generate a query with logical ands.
          For this type of query there is no special treatment, but it is recommended to use parenthesis if the query has spaces to reduce the number of documents returned.
        schema:
          type: string
        required: false
      - in: query
        name: q_claim
        description: Query param that asks for claims field. The request will return the claim highlight in the text if hl is set to "true", if not, it will return just the taxonomy for the facts found in the text. If this parameter is specified more than one time, the system will generate a query with logical ands.
          For this type of field, quotes should always be added and try to search for a specific node or group in the taxonomy. For example -> q_claim:"/INTELLIGENCE_TAX/18000000/18021000"
        schema:
          type: string
        required: false
      - in: query
        name: q_status
        description: Query param that asks for status field.
          For this type of query there is no special treatment, but it is recommended to use parenthesis if the query has spaces to reduce the number of documents returned.
          The values for this field are "running", "done", "failed", "empty".
        schema:
          type: string
        required: false
      - in: query
        name: q_lastModified
        description: Query param that asks for a specific date in the lastModified field. If this parameter is specified more than one time, the system will generate a query with logical ands.
          For this type of query the date must follow a date format and must be quoted or escaped.
          Both of this will return the same output
            q_lastModified:2017-10-06T09\:41\:13Z
            q_lastModified:"2017-10-06T09:41:13Z"
        schema:
          type: string
        required: false
      - in: query
        name: q_last_update
        description: Query param that asks for a specific date in the last_update field. If this parameter is specified more than one time, the system will generate a query with logical ands.
          For this type of query the date must follow a date format and must be quoted or escaped.
          Both of this will return the same output
            q_last_update:2017-10-06T09\:41\:13Z
            q_last_update:"2017-10-06T09:41:13Z"
        schema:
          type: string
        required: false
      - in: query
        name: q_publishedDate
        description: Query param that asks for a specific date in the publishedDate field. If this parameter is specified more than one time, the system will generate a query with logical ands.
          For this type of query the date must follow a date format and must be quoted or escaped.
          Both of this will return the same output
            q_publishedDate:2017-10-06T09\:41\:13Z
            q_publishedDate:"2017-10-06T09:41:13Z"
        schema:
          type: string
        required: false
      - in: query
        name: q_airports
        description: Query param that asks for the entity field airports. If this parameter is specified more than one time, the system will generate a query with logical ands.
          The query string for this field should be a exact match, so quotes should be added or at least * expansors. If no expansors are added, the application will add them automatically.
        schema:
          type: string
        required: false
      - in: query
        name: q_biological_agents
        description: Query param that asks for the entity field biological_agents. If this parameter is specified more than one time, the system will generate a query with logical ands.
          The query string for this field should be a exact match, so quotes should be added or at least * expansors. If no expansors are added, the application will add them automatically.
        schema:
          type: string
        required: false
      - in: query
        name: q_buildings
        description: Query param that asks for the entity field buildings. If this parameter is specified more than one time, the system will generate a query with logical ands.
          The query string for this field should be a exact match, so quotes should be added or at least * expansors. If no expansors are added, the application will add them automatically.
        schema:
          type: string
        required: false
      - in: query
        name: q_chemical_agents
        description: Query param that asks for the entity field chemical_agents. If this parameter is specified more than one time, the system will generate a query with logical ands.
          The query string for this field should be a exact match, so quotes should be added or at least * expansors. If no expansors are added, the application will add them automatically.
        schema:
          type: string
        required: false
      - in: query
        name: q_criminal_organisations
        description: Query param that asks for the entity field criminal_organisations. If this parameter is specified more than one time, the system will generate a query with logical ands.
          The query string for this field should be a exact match, so quotes should be added or at least * expansors. If no expansors are added, the application will add them automatically.
        schema:
          type: string
        required: false
      - in: query
        name: q_critical_infrastructures
        description: Query param that asks for the entity field critical_infrastructures. If this parameter is specified more than one time, the system will generate a query with logical ands.
          The query string for this field should be a exact match, so quotes should be added or at least * expansors. If no expansors are added, the application will add them automatically.
        schema:
          type: string
        required: false
      - in: query
        name: q_cyber_attacks
        description: Query param that asks for the entity field cyber_attacks. If this parameter is specified more than one time, the system will generate a query with logical ands.
          The query string for this field should be a exact match, so quotes should be added or at least * expansors. If no expansors are added, the application will add them automatically.
        schema:
          type: string
        required: false
      - in: query
        name: q_cyber_illegal
        description: Query param that asks for the entity field cyber_illegal. If this parameter is specified more than one time, the system will generate a query with logical ands.
          The query string for this field should be a exact match, so quotes should be added or at least * expansors. If no expansors are added, the application will add them automatically.
        schema:
          type: string
        required: false
      - in: query
        name: q_ew_devices
        description: Query param that asks for the entity field ew_devices. If this parameter is specified more than one time, the system will generate a query with logical ands.
          The query string for this field should be a exact match, so quotes should be added or at least * expansors. If no expansors are added, the application will add them automatically.
        schema:
          type: string
        required: false
      - in: query
        name: q_hash
        description: Query param that asks for the entity field hash. If this parameter is specified more than one time, the system will generate a query with logical ands.
          The query string for this field should be a exact match, so quotes should be added or at least * expansors. If no expansors are added, the application will add them automatically.
        schema:
          type: string
        required: false
      - in: query
        name: q_illicit_drugs
        description: Query param that asks for the entity field illicit_drugs. If this parameter is specified more than one time, the system will generate a query with logical ands.
          The query string for this field should be a exact match, so quotes should be added or at least * expansors. If no expansors are added, the application will add them automatically.
        schema:
          type: string
        required: false
      - in: query
        name: q_influential_people
        description: Query param that asks for the entity field influential_people. If this parameter is specified more than one time, the system will generate a query with logical ands.
          The query string for this field should be a exact match, so quotes should be added or at least * expansors. If no expansors are added, the application will add them automatically.
        schema:
          type: string
        required: false
      - in: query
        name: q_intelligence_agencies
        description: Query param that asks for the entity field intelligence_agencies. If this parameter is specified more than one time, the system will generate a query with logical ands.
          The query string for this field should be a exact match, so quotes should be added or at least * expansors. If no expansors are added, the application will add them automatically.
        schema:
          type: string
        required: false
      - in: query
        name: q_ip
        description: Query param that asks for the entity field ip. If this parameter is specified more than one time, the system will generate a query with logical ands.
          The query string for this field should be a exact match, so quotes should be added or at least * expansors. If no expansors are added, the application will add them automatically.
        schema:
          type: string
        required: false
      - in: query
        name: q_key_company_executives
        description: Query param that asks for the entity field key_company_executives. If this parameter is specified more than one time, the system will generate a query with logical ands.
          The query string for this field should be a exact match, so quotes should be added or at least * expansors. If no expansors are added, the application will add them automatically.
        schema:
          type: string
        required: false
      - in: query
        name: q_medical_conditions
        description: Query param that asks for the entity field medical_conditions. If this parameter is specified more than one time, the system will generate a query with logical ands.
          The query string for this field should be a exact match, so quotes should be added or at least * expansors. If no expansors are added, the application will add them automatically.
        schema:
          type: string
        required: false
      - in: query
        name: q_medical_treatments
        description: Query param that asks for the entity field medical_treatments. If this parameter is specified more than one time, the system will generate a query with logical ands.
          The query string for this field should be a exact match, so quotes should be added or at least * expansors. If no expansors are added, the application will add them automatically.
        schema:
          type: string
        required: false
      - in: query
        name: q_malware
        description: Query param that asks for the entity field malware. If this parameter is specified more than one time, the system will generate a query with logical ands.
          The query string for this field should be a exact match, so quotes should be added or at least * expansors. If no expansors are added, the application will add them automatically.
        schema:
          type: string
        required: false
      - in: query
        name: q_military_actions
        description: Query param that asks for the entity field military_actions. If this parameter is specified more than one time, the system will generate a query with logical ands.
          The query string for this field should be a exact match, so quotes should be added or at least * expansors. If no expansors are added, the application will add them automatically.
        schema:
          type: string
        required: false
      - in: query
        name: q_military_equipment
        description: Query param that asks for the entity field military_equipment. If this parameter is specified more than one time, the system will generate a query with logical ands.
          The query string for this field should be a exact match, so quotes should be added or at least * expansors. If no expansors are added, the application will add them automatically.
        schema:
          type: string
        required: false
      - in: query
        name: q_military_facilities
        description: Query param that asks for the entity field military_facilities. If this parameter is specified more than one time, the system will generate a query with logical ands.
          The query string for this field should be a exact match, so quotes should be added or at least * expansors. If no expansors are added, the application will add them automatically.
        schema:
          type: string
        required: false
      - in: query
        name: q_military_forces
        description: Query param that asks for the entity field military_forces. If this parameter is specified more than one time, the system will generate a query with logical ands.
          The query string for this field should be a exact match, so quotes should be added or at least * expansors. If no expansors are added, the application will add them automatically.
        schema:
          type: string
        required: false
      - in: query
        name: q_natural_disasters
        description: Query param that asks for the entity field natural_disasters. If this parameter is specified more than one time, the system will generate a query with logical ands.
          The query string for this field should be a exact match, so quotes should be added or at least * expansors. If no expansors are added, the application will add them automatically.
        schema:
          type: string
        required: false
      - in: query
        name: q_non_governative_organisations
        description: Query param that asks for the entity field non_governative_organisations. If this parameter is specified more than one time, the system will generate a query with logical ands.
          The query string for this field should be a exact match, so quotes should be added or at least * expansors. If no expansors are added, the application will add them automatically.
        schema:
          type: string
        required: false
      - in: query
        name: q_organizations
        description: Query param that asks for the entity field organizations. If this parameter is specified more than one time, the system will generate a query with logical ands.
          The query string for this field should be a exact match, so quotes should be added or at least * expansors. If no expansors are added, the application will add them automatically.
        schema:
          type: string
        required: false
      - in: query
        name: q_people
        description: Query param that asks for the entity field people. If this parameter is specified more than one time, the system will generate a query with logical ands.
          The query string for this field should be a exact match, so quotes should be added or at least * expansors. If no expansors are added, the application will add them automatically.
        schema:
          type: string
        required: false
      - in: query
        name: q_places
        description: Query param that asks for the entity field places. If this parameter is specified more than one time, the system will generate a query with logical ands.
          The query string for this field should be a exact match, so quotes should be added or at least * expansors. If no expansors are added, the application will add them automatically.
        schema:
          type: string
        required: false
      - in: query
        name: q_points_of_interest
        description: Query param that asks for the entity field points_of_interest. If this parameter is specified more than one time, the system will generate a query with logical ands.
          The query string for this field should be a exact match, so quotes should be added or at least * expansors. If no expansors are added, the application will add them automatically.
        schema:
          type: string
        required: false
      - in: query
        name: q_public_leading_companies
        description: Query param that asks for the entity field public_leading_companies. If this parameter is specified more than one time, the system will generate a query with logical ands.
          The query string for this field should be a exact match, so quotes should be added or at least * expansors. If no expansors are added, the application will add them automatically.
        schema:
          type: string
        required: false
      - in: query
        name: q_security_tools
        description: Query param that asks for the entity field security_tools. If this parameter is specified more than one time, the system will generate a query with logical ands.
          The query string for this field should be a exact match, so quotes should be added or at least * expansors. If no expansors are added, the application will add them automatically.
        schema:
          type: string
        required: false
      - in: query
        name: q_social_tags
        description: Query param that asks for the entity field social_tags. If this parameter is specified more than one time, the system will generate a query with logical ands.
          The query string for this field should be a exact match, so quotes should be added or at least * expansors. If no expansors are added, the application will add them automatically.
        schema:
          type: string
        required: false
      - in: query
        name: q_terrorist_organisations
        description: Query param that asks for the entity field terrorist_organisations. If this parameter is specified more than one time, the system will generate a query with logical ands.
          The query string for this field should be a exact match, so quotes should be added or at least * expansors. If no expansors are added, the application will add them automatically.
        schema:
          type: string
        required: false
      - in: query
        name: q_us_senators
        description: Query param that asks for the entity field us_senators. If this parameter is specified more than one time, the system will generate a query with logical ands.
          The query string for this field should be a exact match, so quotes should be added or at least * expansors. If no expansors are added, the application will add them automatically.
        schema:
          type: string
        required: false
      - in: query
        name: q_vehicles_cars
        description: Query param that asks for the entity field vehicles_cars. If this parameter is specified more than one time, the system will generate a query with logical ands.
          The query string for this field should be a exact match, so quotes should be added or at least * expansors. If no expansors are added, the application will add them automatically.
        schema:
          type: string
        required: false
      - in: query
        name: q_vechicle_motorbikes
        description: Query param that asks for the entity field vechicle_motorbikes. If this parameter is specified more than one time, the system will generate a query with logical ands.
          The query string for this field should be a exact match, so quotes should be added or at least * expansors. If no expansors are added, the application will add them automatically.
        schema:
          type: string
        required: false
      - in: query
        name: q_vulnerabilities
        description: Query param that asks for the entity field vulnerabilities. If this parameter is specified more than one time, the system will generate a query with logical ands.
          The query string for this field should be a exact match, so quotes should be added or at least * expansors. If no expansors are added, the application will add them automatically.
        schema:
          type: string
        required: false
      - in: query
        name: q_wanted_for_terrorism
        description: Query param that asks for the entity field wanted_for_terrorism. If this parameter is specified more than one time, the system will generate a query with logical ands.
          The query string for this field should be a exact match, so quotes should be added or at least * expansors. If no expansors are added, the application will add them automatically.
        schema:
          type: string
        required: false
      - in: query
        name: q_weapons_of_mass_destruction
        description: Query param that asks for the entity field weapons_of_mass_destruction. If this parameter is specified more than one time, the system will generate a query with logical ands.
          The query string for this field should be a exact match, so quotes should be added or at least * expansors. If no expansors are added, the application will add them automatically.
        schema:
          type: string
        required: false
      - in: query
        name: q_world_leaders
        description: Query param that asks for the entity field world_leaders. If this parameter is specified more than one time, the system will generate a query with logical ands.
          The query string for this field should be a exact match, so quotes should be added or at least * expansors. If no expansors are added, the application will add them automatically.
        schema:
          type: string
        required: false
      - in: query
        name: q_schema_org_claimReviewed
        description: Query param that asks for the schema_org_claimReviewed field.
          For this type of query there is no special treatment, but it is recommended to use parenthesis if the query has spaces to reduce the number of documents returned.
        schema:
          type: string
        required: false
      - in: query
        name: q_schema_org_cr_author_name
        description: Query param that asks for the schema_org_cr_author_name field.
          For this type of query there is no special treatment, but it is recommended to use parenthesis if the query has spaces to reduce the number of documents returned.
        schema:
          type: string
        required: false
      - in: query
        name: q_schema_org_cr_author_url
        description: Query param that asks for the schema_org_cr_author_name field.
          For this type of query there is no special treatment, but it is recommended to use parenthesis if the query has spaces to reduce the number of documents returned.
        schema:
          type: string
        required: false
      - in: query
        name: q_schema_org_cr_author_n3
        description: Query param that asks for the schema_org_cr_author_n3 field.
          For this type of query there is no special treatment, but it is recommended to use parenthesis if the query has spaces to reduce the number of documents returned.
        schema:
          type: string
        required: false
      - in: query
        name: q_schema_org_rating_altName
        description: Query param that asks for the schema_org_rating_altName field.
          For this type of query there is no special treatment, but it is recommended to use parenthesis if the query has spaces to reduce the number of documents returned.
        schema:
          type: string
        required: false
      - in: query
        name: q_schema_org_rating_image
        description: Query param that asks for the schema_org_rating_image field.
          For this type of query there is no special treatment, but it is recommended to use parenthesis if the query has spaces to reduce the number of documents returned.
        schema:
          type: string
        required: false
      - in: query
        name: q_schema_org_cr_url
        description: Query param that asks for the schema_cr_url field.
          For this type of query there is no special treatment, but it is recommended to use parenthesis if the query has spaces to reduce the number of documents returned.
        schema:
          type: string
        required: false
      - in: query
        name: q_schema_org_itemReviewed_n3
        description: Query param that asks for the schema_org_itemReviewed_n3 field.
          For this type of query there is no special treatment, but it is recommended to use parenthesis if the query has spaces to reduce the number of documents returned.
        schema:
          type: string
        required: false
      responses:
        '200':
          description: get all documents or get documents filtered by several test fields.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SearchResponse'
        '400':
          description: bad input parameter, for example, making a request for a non-existing collection or field.
          
  /tweet/claim/credibility:
    post:
      tags:
        - developers
      summary: Analyse claims made (or linked to) in one or more tweets and generate a credibility report.
      operationId: tweetCredibility
      requestBody:
        description: Provide information about the tweets to analyse and an optional callback url
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TweetClaimCredRequest'
      responses:
        '200':
          description: >-
            Request accepted. If request:
            - contained a callback URL, it responds immediately accepting the requets. 
            - had no callback URL, it responds *synchronously* and sends the tweet credibility report  
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/CallbackRequestAccept'
                  - type: array
                    items: 
                      $ref: '#/components/schemas/TweetCredibilityPrediction'
        '400':
          description: Bad request. Not enough information to analyse tweets or bad callback URL.
        '5XX':
          description: Unexpected error on the server.

  /tweet/accuracy-review:
    get:
      tags:
        - planned
      summary: Summary of accuracy reviews for a given tweet (and optional user)
      operationId: getTweetAccuracyReview
      parameters:
        - in: query
          name: tweet_id
          description: >-
            A twitter status-id the corresponding URL would be something like `http(s)://twitter.com/<user>/status/<tweet_id>`
          example: 960194140876177408
          required: true
          schema:
            type: string
        - in: query
          name: user_id
          description: >-
            A Co-inform user UUID. When provided, it will return a
            summary of the accuracy ratings for the tweet by this
            user.
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: summary of accuracy reviews for the tweet
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TweetAccuracyReviewResponse'
        '400':
          description: bad input parameter
        
  /claim/search:
    get:
      tags:
        - developers
      summary: finds similar claims or sentences in a claim database
      operationId: searchClaim
      description: Finding similar claims or sentences in the co-inform claim database
      parameters:
        - in: query
          name: claim
          description: >-
            This should be an English sentence or claim. Multiple sentences are
            not allowed.
          required: true
          schema:
            type: string
        - in: query
          name: keyword
          description: One or more keywords to filter the found claims/sentences
          schema:
            type: string
        - in: query
          name: lang
          description: Language(s) to match
          schema:
            type: string
        - in: query
          name: domain
          description: url domains to match
          schema:
            type: string
        - in: query
          name: category
          description: Cogito taxonomy category to match
          schema:
            type: string
      responses:
        '200':
          description: array of related sentences
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/RelatedSentenceOrReview'
                  resultsHeader:
                    type: object
                    properties:
                      params:
                        type: object
                      QTime:
                        type: number
                        format: long
                        description: Milliseconds spent producing the result
        '400':
          description: bad input parameter
  /claim/predict/credibility:
    get:
      tags:
        - developers
      summary: analyses a claim to predict its credibility
      operationId: predictClaimCredibility
      description: >
        Analyses the input claim and compares it to existing claims/statements
        in the database. Based on the result, it produces a credibility score
        with optional details explaining what the score is based on and linking
        to similar claims.
      parameters:
        - in: query
          name: claim
          description: >-
            required string. This should be a sentence or claim. If multiple
            sentences are passed, this will result in multiple predictions for
            the individual claims.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: array of claim credibility predictions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ClaimCredibilityPrediction'
        '400':
          description: bad input parameter
  /log/plugin/action:
    post:
      tags:
        - planned
      summary: post a batch of plugin actions to be logged
      operationId: logPluginAction
      description: >-
        Accepts a batch of plugin actions and stores them in the
        database. Currently, no validation is performed on this
        data. If you submit data that is not in accordance to the DB
        schema, this action will fail.
      requestBody:
        description: List of log records to store
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/PluginActionRecord'
      responses:
        '200':
          description: >-
            Request accepted and values stored in the DB
          content:
            application/json:
              schema:
                type: object
                properties:
                  messsage:
                    type: string
                    example: '2 records added to the database'
        '400':
          description: Bad request. DB probably rejected one or more of the records
        '5XX':
          description: Unexpected error on the server
  
servers:
  - url: 'https://coinform.expertsystemcustomer.com/cc/api/v1'
    description: ESI's coinform endpoint (ask for permission to gain access)

components:
  schemas:
    PluginActionRecord:
      type: object
      required:
        - user_id
        - plugin_version
        - log_time
        - log_category
        - log_action
      properties:
        user_id:
          type: string
          example: "CoinformUser-abc-efg"
        plugin_version:
          type: string
          example: "3.2.0 DEV"
        log_time:
          type: string
          format: date-time
          example: "2020-04-04T20:33:30.465Z"
        log_category:
          type: string
          example: "log_test"
        related_item_url:
          type: string
          format: url
        related_item_data:
          type: string
          example: "Label: Not Credible"
        log_action:
          type: string
          example: 'Clicked on "Why can''t I see this?" button'
    Collection:
      type: object
      required:
        - name
        - description
      properties: 
        name:
          type: string
          example: "pilot-se"
        description:
          type: string
          example: "Content from fact-checking sites"
    FacetCounts:
      type: object
      required:
        - facet_fields
      properties:
        facet_fields:
          $ref: '#/components/schemas/FacetFields'
    FacetFields:
      type: object
      properties:
        #Here we should include any field
        buildings:
          type: array
          items:
            type: string
    ResponseHeader:
      type: object
      required:
        - QTime
        - params
        - status
      properties:
        QTime:
          type: integer
        params:
          $ref: '#/components/schemas/Params' 
        status:
          type: integer
    Params:
      type: object
      required:
      - collection
      - q
      properties:
        collection:
          type: string
        q:
          type: string
    Response:
      type: object
      required:
      - docs
      - numFound
      - start
      properties:
        docs:
          type: array
          items:
            $ref: '#/components/schemas/Document'
        numFound:
          type: integer
        start:
          type: integer
        
    Document:
      type: object
      required:
        - content
        - contentLength
        - digest
        - id
        - lang
        - lang_orig
        - lastModified
        - last_update
        - main_elements
        - publishedDate
        - size
        - source
        - source_id
        - status
        - title
        - url
      properties:
        categories:
          type: array
          items:
            type: string
        claims:
          type: array
          items:
            type: string
        content:
          type: string
        contentLength:
          type: string
        collection:
          type: string
        digest:
          type: string
        geo:
          type: array
          items:
            type: string
        id:
          type: string
        lang:
          type: string
        lang_orig:
          type: string
        lastModified:
          type: string
        last_update:
          type: string
        main_elements:
          type: array
          items:
            type: string
        publishedDate:
          type: string
          format: date-time
        retrieved_on:
          type: string
          format: date-time
        sentiments:
          type: array
          items:
            type: string
        size:
          type: integer
        source:
          type: string
        source_id:
          type: array
          items:
            type: string
        status:
          type: string
        structured_data:
          type: array
          items:
            type: string
        title:
          type: string
        url:
          type: string
        airports:
          type: array
          items:
            type: string
        biological_agents:
          type: array
          items:
            type: string
        buildings:
          type: array
          items:
            type: string
        chemical_agents:
          type: array
          items:
            type: string
        criminal_organisations:
          type: array
          items:
            type: string
        critical_infrastructures:
          type: array
          items:
            type: string
        cyber_attacks:
          type: array
          items:
            type: string
        cyber_illegal:
          type: array
          items:
            type: string
        ew_devices:
          type: array
          items:
            type: string
        hash:
          type: array
          items:
            type: string
        illicit_drugs:
          type: array
          items:
            type: string
        influential_people:
          type: array
          items:
            type: string
        intelligence_agencies:
          type: array
          items:
            type: string
        ip:
          type: array
          items:
            type: string
        key_company_executives:
          type: array
          items:
            type: string
        medical_conditions:
          type: array
          items:
            type: string
        medical_treatments:
          type: array
          items:
            type: string
        malware:
          type: array
          items:
            type: string
        military_actions:
          type: array
          items:
            type: string
        military_equipment:
          type: array
          items:
            type: string
        military_facilities:
          type: array
          items:
            type: string
        military_forces:
          type: array
          items:
            type: string
        natural_disasters:
          type: array
          items:
            type: string
        non_governative_organisations:
          type: array
          items:
            type: string
        organizations:
          type: array
          items:
            type: string
        people:
          type: array
          items:
            type: string
        places:
          type: array
          items:
            type: string
        points_of_interest:
          type: array
          items:
            type: string
        public_leading_companies:
          type: array
          items:
            type: string
        security_tools:
          type: array
          items:
            type: string
        social_tags:
          type: array
          items:
            type: string
        terrorist_organisations:
          type: array
          items:
            type: string
        us_senators:
          type: array
          items:
            type: string
        vehicles_cars:
          type: array
          items:
            type: string
        vechicle_motorbikes:
          type: array
          items:
            type: string
        vulnerabilities:
          type: array
          items:
            type: string
        wanted_for_terrorism:
          type: array
          items:
            type: string
        weapons_of_mass_destruction:
          type: array
          items:
            type: string
        world_leaders:
          type: array
          items:
            type: string
        schema_org_claimReviewed:
          type: array
          items:
            type: string
        schema_org_cr_author_n3:
          type: array
          items:
            type: string
        schema_org_cr_author_name:
          type: array
          items:
            type: string
        schema_org_cr_author_url:
          type: array
          items:
            type: string
        schema_org_cr_datePublished:
          type: array
          items:
            type: string
        schema_org_cr_itemReviewed_n3:
          type: array
          items:
            type: string
        schema_org_cr_n3:
          type: array
          items:
            type: string
        schema_org_cr_rating_altName:
          type: array
          items:
            type: string
        schema_org_cr_rating_best:
          type: array
          items:
            type: string
        schema_org_cr_rating_value:
          type: array
          items:
            type: string
        schema_org_cr_rating_worst:
          type: array
          items:
            type: string
        schema_org_cr_url:
          type: array
          items:
            type: string


    UserReviewResponse:
      allOf:
        - $ref: '#/components/schemas/Response'
        - type: object
          properties:
            response:
              $ref: '#/components/schemas/UReviewResponse'

    ReviewResponse:
      type: object
      required:
      - docs
      - numFound
      - start
      properties:
        docs:
          type: array
          items:
            $ref: '#/components/schemas/Review'
        numFound:
          type: integer
        start:
          type: integer

    UReviewResponse:
      allOf:
        - $ref: '#/components/schemas/ReviewResponse'
        - type: object
          properties:
            docs:
              type: array
              items:
                $ref: '#/components/schemas/UserReview'

    UserAccuracyReviewsByReviewedItem:
      type: object
      required:
        - itemReviewed.url
        - type
        - numUsersWhoRequestedFactcheck
        - numUsersWhoReviewedItem
        - usersWhoRequestedReview
        - usersWhoReviewedItem
      properties:
        type:
          type: string
          enum: [CoinformUserAccuracyReviewsByReviewedItem]
        itemReviewed.url:
          type: string
          format: url
          description: The URL for the item that was reviewed by users (directly or indirectly)
        numUsersWhoRequestedFactcheck:
          type: integer
          description: Number of users who requested the item to be fact-checked professionally
        numUsersWhoReviewedItem:
          type: integer
          description: Number of users who reviewed the item directly or indirectly
        usersWhoRequestedReview:
          $ref: '#/components/schemas/AuthorAndMostRecentReview'


    AuthorAndMostRecentReview:
      type: object
      required:
        - type
        - author.url
      properties:
        type:
          type: string
          enum: [AuthorAndMostRecentReview]
        author.url:
          type: string
          format: url
          description: The URL for the author of a Review
          example: "http://coinform.eu/user/2094970a-2b0d-4f1a-999c-d0a41b3c677f"
        mostRecentAccuracyReview:
          $ref: '#/components/schemas/UserReview'
        mostRecent(dis)agreeReview:
          $ref: '#/components/schemas/UserReview'
        
        
          
    CoinformUser:
      type: object
      required:
      - context
      - type
      properties:
        context:
          type: string
          enum: ["http://coinform.eu"]
        type:
          type: string
          enum: [CoinformUser]
        url:
          type: string
          description: Either url or identifier are required
          example: http://coinform.eu/users/dtrump
        identifier:
          type: string
          description: Either url or identifier are required
          example: dtrump

    WebSite:
      type: object
      required:
      - context
      - type
      - url
      properties:
        context:
          type: string
          enum: ["http://schema.org"]
        type:
          type: string
          example: WebSite
        url:
          type: string
          example: https://en.wikipedia.org/wiki/Mean_absolute_error

    AccuracyRating:
      type: object
      required:
      - type
      - ratingValue
      properties:
        context:
          type: string
        type:
          type: string
          enum: [CoinformAccuracyRating]
        ratingValue:
          type: string
          enum: [accurate, accurate_with_considerations, unsubstantiated, inaccurate_with_considerations, inaccurate]
        reviewAspect:
          type: string
          enum: [accuracy]

    ItemRef:
      type: object
      description: >-
        A reference to some item. This can be a user, website, article, tweet, sentence, co-inform credibility review, etc. As long as we have a type and url, we should be able to resolve this item.
      required:
      - type
      - url
      properties:
        context:
          type: string
          enum: ["http://schema.org", "http://coinform.eu"]
        type:
          type: string
          example: Sentence
        url:
          type: string
          example: http://coinform.eu/sentence?text=vaccines cause autism

    Review:
      type: object
      required:
        - author
        - text
        - name
        - reviewAspect 
        - reviewRating
        - itemReviewed
        - dateCreated
      properties:
        context:
          type: string
          enum: ["http://schema.org", "http://coinform.eu"]
        type:
          type: string
          enum: [Review]
        url:
          type: string
          format: url
          description: Required after insert. Serves as a unique identifier for this Review.
          example: http://coinform.eu/dtrump/20200213T150605
        author:
          oneOf:
            - $ref: '#/components/schemas/Organization'
            - $ref: '#/components/schemas/Person'
        text:
          type: string
          example: The Tweet/sentence/claim/article/credibility is wrong, because ..  
        name:
          type: string
          description: a short label summarising this review
          example: inaccurate
        reviewAspect:
          type: string
          enum: [accuracy]
        reviewRating:
          $ref: '#/components/schemas/AccuracyRating'
        itemReviewed:
          $ref: '#/components/schemas/ItemRef'
        dateCreated:
          type: string
          format: date-time
          
    UserReview:
      type: object
      required:
        - author
        - text
        - name
        - supportingItem
        - reviewAspect 
        - reviewRating
        - itemReviewed
        - dateCreated
        - requestFactCheck
      properties:
        context:
          type: string
          enum: ["http://schema.org", "http://coinform.eu"]
        type:
          type: string
          enum: [CoinformUserReview]
        url:
          type: string
          description: Required after insert. Serves as a unique identifier for this UserReview. It will have the schema http://coinform.eu/user-ratings/<user_id>/<YYYYMMTddmmss>.
          example: http://coinform.eu/dtrump/20200213T150605
        author:
          $ref: '#/components/schemas/CoinformUser'
        text:
          type: string
          example: The Tweet/sentence/claim/article/credibility is wrong, as the supporting/refuting website shows  
        name:
          type: string
        supportingItem:
          type: array
          items:
            $ref: '#/components/schemas/WebSite'
          description: We support multiple supporting items
        reviewAspect:
          type: string
          enum: [accuracy]
        reviewRating:
          $ref: '#/components/schemas/AccuracyRating'
        itemReviewed:
          $ref: '#/components/schemas/ItemRef'
        dateCreated:
          type: string
          format: date-time
        requestFactCheck:
          type: boolean
          
    SearchResponse:
      type: object
      required:
        - facet_counts
        - response
        - responseHeader
      properties:
        facet_counts:
          $ref: '#/components/schemas/FacetCounts'
        response:
          $ref: '#/components/schemas/Response'
        responseHeader:
          $ref: '#/components/schemas/ResponseHeader'

    TweetAccuracyReviewResponse:
      type: object
      required:
        - response
        - responseHeader
      properties:
        response:
          $ref: '#/components/schemas/CoinformTweetReviewSummary'
        responseHeader:
          $ref: '#/components/schemas/ResponseHeader'

    CoinformTweetReviewSummary:
      type: object
      required:
        - type
        - tweet
        - coinform_credibility_reviews
      properties:
        type:
          type: string
          example: CoinformTweetReviewSummary
        title:
          type: string
          example: Summary of Accuracy and Credibility Reviews for a Tweet
        description:
          type: string
        tweet:
          type: object
          properties:
            id:
              type: string
              example: 	960194140876177408
            urls:
              type: object
              description: URL of the tweets reviewed and their count
              example:
                https://twitter.com/citoyenneFrance/status/960194140876177408: 1
        coinform_user_id:
          type: string
          format: uuid
        user_accuracy_reviews:
          allOf:
            - $ref: '#/components/schemas/UserAccuracyReviewsSummary'
            - type: object
              description: >-
                Provides a summary of (user provided) accuracy reviews for the `tweet`
        coinform_credibility_reviews:
          allOf:
            - $ref: '#/components/schemas/CoinformCredibilityReviewsSummary'
            - type: object
              description: >-
                Provides a summary of the (user provided)
                (dis)agreements for (system provided) credibility
                labels for the `tweet`
                

    UserAccuracyReviewsSummary:
      type: object
      description: >-
        Provides a summary of accuracy reviews for some rated item
      required:
        - all_users
      properties:
        all_users:
          type: object
          description: Summary of ratings provided by all co-inform users
          properties:
            accuracy_labels:
              $ref: '#/components/schemas/AccuracyLabelCounts'
            total_count:
              type: integer
              description: >-
                Total number of Accuracy Reviews (from all users)
              example: 10
            total_users:
              type: integer
              description: >-
                Number of users who have rated the item(s)
              example:
                2
        user:
          type: object
          description: Summary of ratings provided by the current user
          properties:
            accuracy_labels:
              $ref: '#/components/schemas/AccuracyLabelCounts'
            total_count:
              type: integer
              description: >-
                Total number of Accuracy Reviews by this user
            reviews:
              type: array
              description: list of User accuracy reviews for the item(s)
              items:
                type: object
                properties:
                  id:
                    type: string
                  name:
                    type: string

    AccuracyLabelCounts:
      type: object
      properties:
        accurate:
          description: How many `accurate` ratings 
          type: integer
        accurate_with_considerations:
          description: How many `accurate_with_consideration_s` ratings 
          type: integer
        unsubstantiated:
          description: How many `unsubstantiated` ratings 
          type: integer
        inaccurate_with_considerations:
          description: How many `inaccurate_with_considerations` ratings 
          type: integer
        inaccurate:
          description: How many `inaccurate` ratings 
          type: integer
        not_verifiable:
          description: How many `not_verifiable` ratings 
          type: integer

    CoinformCredibilityReviewsSummary:
      type: object
      required:
        - total_count
        - (dis)agreement_feedback
      properties:
        total_count:
          type: integer
          description: >-
            Total number of Credibility Reviews
        (dis)agreement_feedback:
          type: object
          properties:
            credibility_uncertain:
              $ref: '#/components/schemas/AgreementFeedbackSummary'
            credible:
              $ref: '#/components/schemas/AgreementFeedbackSummary'
            mostly_credible:
              $ref: '#/components/schemas/AgreementFeedbackSummary'
            not_credible:
              $ref: '#/components/schemas/AgreementFeedbackSummary'
            not_verifiable:
              $ref: '#/components/schemas/AgreementFeedbackSummary'

    AgreementFeedbackSummary:
      type: object
      description: >-
        Summarises how many (dis)agreements (for a credibility label)
        users have reported. If a current user is in scope, this also
        reports a summary of the user's (dis)agreements.
      required:
        - total_agree
        - total_disagree
      properties:
        total_agree:
          type: integer
          description: >-
            Total number of user ratings agreeing with this credibility label
          example: 2
        total_disagree:
          type: integer
          description: >-
            Total number of user ratings disagreeing with this credibility label
          example: 5
        user_feedback:
          type: string
          enum: [agree, disagree]
          description: >-
            Whether the current user (most recently) agreed or
            disagreed with the credibility label
        user_reviews:
          type: array
          description: >-
            List of reviews by the user (dis)agreeing with the
            label. You can use this to retrieve further details about
            the specific reviews.
          items:
            type: object
            properties:
              url:
                type: string
                format: url
                example: http://coinform.eu/837a0f4f-0c20-42fa-b29c-68a03e5d46cd/accuracyreview/2020-09-08T20:40:28.964795Z
          
    URLCollectionResult:
      type: object
      description: >-
        Describes the result of an on-the-fly collection of a requested URL. The pipeline is broadly: (i) resolve input url, (ii) extract text and metadata of the resolved document, (iii) semantically analyse the extracted text and (iv) store the analysed document in a collection in the database. This object should give you an idea of whether this process was successful or not. In particular, if the `semanticAnalysis` field is populated, this indicates that the URL was successfully analysed. Any issues will be reported in the `issues` field. 
      required:
        - url
      properties:
        url:
          type: string
          description: The original url that was requested to be collected
        resolvedUrl:
          type: string
          description: The resolved url which eventually returned a valid file (HTML or otherwise). This may be the same as the original `url`
        semanticAnalysis:
          $ref: '#/components/schemas/Document'
        issues:
          type: array
          items:
            type: string
          description: list of errors or warning encountered during collection/analysis of the input `url`.
          
    URLCollectResponse:
      type: object
      required:
        - urls
      properties:
        urls:
          type: array
          items: 
            $ref: '#/components/schemas/URLCollectionResult'
            
    CallbackRequestAccept:
      type: object
      required:
        - msg
      properties:
        msg:
          type: string
          description: >-
            a textual message stating that the callback request has been accepted.
          example: "Request accepted, will analyse the 4 requested tweets and send results to https://api.coinform.eu/module/response/"
    Tweet:
      type: object
      required:
        - tweet_id
      properties:
        tweet_id:
          type: integer
          description: >-
            A Twitter status id to analyse
          example: 1178504740558163968
        content:
          type: string
          description: >-
            The textual content of the tweet (Optional)
          example: >-
            Hundreds of scientists, engineers tell U.N.: 'There is no climate emergency'  http://bit.ly/2onUUU1
        linked_urls: 
          type: array
          description: >-
            Any (resolved?) urls linked by the tweet
          items:
            type: string
            description: >-
              A URL
            example: "https://www.washingtontimes.com/news/2019/sep/29/scientists-tell-un-global-climate-summit-no-emerge/"
    TweetClaimCredRequest:
      type: object
      required:
        - tweets
      properties:
        tweets:
          type: array
          items:
            $ref: '#/components/schemas/Tweet'
        callback_url:
          type: string
          description: >-
            Optional url. When included, the request will be handled in an asynchronous way as agreed within the co-inform project.
          example: "https://api.coinform.eu/module/response/abcdefg"
    TweetCredibilityPrediction:
      type: object
      required:
        - tweet_id
        - credibility
        - confidence
        - explanation
      properties:
        tweet_id:
          type: integer
          example: 1178504740558163968
        credibility:
          type: number
          format: float
          description: >-
            Credibility estimation for the input tweet. 
            -1.0 means not credible at all, 1.0 means fully credible.
            You should also look at the confidence value and the explanation.
          minimum: -1.0
          maximum: 1.0
          example: 0.5
        confidence:
          type: number
          format: float
          minimum: 0
          maximum: 1
          description: >-
            How confidence we are about the credibility score. E.g. if the input tweet does not contain text or the text is unlike claims in the database, our confidence will be low. On the other hand, if we have an exact match in our database that has also been fact-checked by a reputable source, we will have high confidence.
          example: 0.5
        explanation:
          type: string
          description: >-
            Human readable exaplanation of the credibility and confidence scores.
            These reflect the strategies used by the service to come up with the scores. At the moment, we consider the following strategies.
            1. find sentenes in the text of the tweet and assess their credibility using the `claim credibility` service.
            2. resolve any urls contained in the tweet and if it points to websites containing text, extract claims made in those texts and assess their credibility.
          example: Tweet contains claims which are very similar to a claim fact-checked by FactCheckNI
        sentences_in_tweet:
          type: array
          description: >-
            List of claim credibility assessments for all the sentences occurring in the tweet. If the tweet does not contain sentences/claims, this will not be included in the response.
          items:
            $ref: '#/components/schemas/ClaimCredibilityPrediction'

        sentences_linked:
          type: array
          description: >-
            List of objects where each object represents a claim made in a linked document. Of course, if the tweet does not contain links, or the links do not contain text to analyse, we do not return this property.
          items:
            type: object
            properties:
              url:
                type: string
                description: >-
                  The (resolved) url linked by the input tweet containing the sentence that was analysed.
              sentence:
                $ref: '#/components/schemas/ClaimCredibilityPrediction'
    ClaimCredibilityPrediction:
      type: object
      required:
        - claim
        - credibility
        - confidence
        - related_claims
        - explanation
      properties:
        claim:
          type: string
          example: >-
            More than 80 per cent of population growth in the UK in recent years
            was down to immigration
        credibility:
          $ref: "#/components/schemas/CredibilityAssessment"
        related_claims:
          $ref: '#/components/schemas/RelatedClaims'
    CredibilityAssessment:
      description: >-
        Encapsulates a credibility assessment of an encompassing object in terms of a value in range [-1,1] and a confidence in range [0, 1] with optional explanation and source.
      type: object
      required:
        - value
        - confidence
      properties:
        value:
          type: number
          format: float
          description: >-
            Credibility estimation for the input claim. 
            -1.0 means not credible at all, 1.0 means fully credible.
            You should also look at the confidence value and the explanation.
          minimum: -1.0
          maximum: 1.0
          example: 0.5
        confidence:
          type: number
          format: float
          minimum: 0
          maximum: 1
          description: >-
            How confidence we are about the credibility score. E.g. if the input claim is unlike claims in the database, our confidence will be low. On the other hand, if we have an exact match in our database that has also been fact-checked by a reputable source, we will have high confidence.
          example: 0.5
        explanation:
          type: string
          description: >-
            Human readable exaplanation of the credibility assessment value and confidence scores.
            These reflect the strategies used by the service to come up with the scores.
          example: Claim is very similar to (claim) that was published in a site (site) that is unreliable
        source:
          type: string
          description: >-
            Short description of the evidence taken into account to come up with this credibility assessment
          example: Credibility of related claims (3)
    RelatedClaims:
      properties:
        reviewed-claims:
          type: array
          items:
            $ref: '#/components/schemas/RelatedClaimReview'
        fact-checker-sentences:
          type: array
          items:
            $ref: '#/components/schemas/RelatedSentence'
        credible-pub-sentences:
          type: array
          items:
            $ref: '#/components/schemas/RelatedSentence'
        non-credible-pub-sentences:
          type: array
          items:
            $ref: '#/components/schemas/RelatedSentence'
    RelatedSentenceOrReview:
      oneOf:
        - $ref: '#/components/schemas/RelatedSentence'
        - $ref: '#/components/schemas/RelatedClaimReview'
    RelatedClaimReview:
      description: >-
        Describes a claimReview found on-line that is related (usually semantically similar) to an encapsulating claim/sentence.
      required:
        - claimReviewed
        - similarity
      properties:
        claimReviewed:
          type: string
          example: >-
            We are contributing to the national government in excess of KSh49
            billion in taxes annually.
        similarity:
          type: number
          format: float
          example: 0.8
        claimReview_credibility_rating:
          $ref: '#/components/schemas/CredibilityAssessment'
        domain:
          type: string
          example: www.faktyoxla.info
        domain_credibility:
          $ref: '#/components/schemas/CredibilityAssessment'
        fact-checker:
          type: string
          description: >- 
            Name or url of the fact checking organisation that published the claimReview
          example: Africa Check
        published_date:
          type: string
          format: date-time
          example: '2019-04-24T08:55:51.000Z'
        url:
          type: string
          format: uri
          example: 'https://africacheck.org/…on-a-year-in-import-tax/'
        altName:
          type: string
          example: Incorrect
        claimReview:
          type: object
          description: >-
            When possible, we try to provide a json-ld description of the matched claim review.
    RelatedSentence:
      description: >-
        Describes a sentence found in an on-line document that is related (usually semantically similar) to an encapsulating claim/sentence.
      type: object
      required:
        - sentence
        - domain
        - similarity
      properties:
        sentence:
          type: string
          description: >-
            The sentence itself (note that it may be a translation from a sentence)
          example: >-
            Migration Watch UK estimates that about 3.1 million migrants arrived
            and a further 2.3 million were born in Britain between 2001 and 2016
        similarity:
          type: number
          format: float
          description: >-
            We aim (but no promises yet) to keep the values between 0 and 1, where 0 means not related at all and 1 means "semantically similar". However calculating accurate semantic similarity is still an active research topic.
          example: 0.8
        domain:
          type: string
          description: >-
            Site where the sentence was published (other sites may also have published the same sentence)
          example: africacheck.org
        doc_url:
          type: string
          format: uri
          description: >-
            URL where the sentence appears (possibly in the original language if the sentence was translated)
          example: >-
            https://www.expressen.se/nyheter/val-2018/klimatet-huvudfragan-i-forsta-partiledardebatten
        coinform_collection:
          type: string
          example: pilot-sv
        lang_orig:
          type: string
          example: de
        published_date:
          type: string
          format: date-time
          example: '2019-05-07T15:40:46.791Z'
        claimspot_score:
          type: number
          format: float
          example: 0.5
        domain_credibility:
          $ref: '#/components/schemas/CredibilityAssessment'
    Thing:
      type: object
      description: >-
        The most generic type of *identifiable* item.
      properties:
        context:
          type: string
          format: uri
          description: A URL describing the context of this Thing
        type:
          type: string
          description: >-
            Name of the schema type, defined within the `context`, for this `Thing`
        identifier:
          type: string
          description: >-
            The identifier property represents any kind of identifier for any kind of Thing, such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides dedicated properties for representing many of these, either as textual strings or as URL (URI) links. See background notes for more details. The combination of `context` and `identifier` should be sufficient to resolve this item.
        url:
          type: string
          format: uri
          description: >-
            URL of the item. Navigating to this URL should return information about this item. Typically, the URL will be a canonical URL that encodes the `type` and the `identifier` for this item.
        dateInserted:
          type: string
          format: datetime
          description: >-
            Records the insertion date of this item into the system. Only the system should set this value upon insertion of data into the DB. Users should not specify this value when submitting documents (users can use other properties like `dateCreated` for this purpose).

            All data items recorded by the system **must** contain a value for this property, as it will be used to create queries which generate immutable resultsets for the database. Conversely, computed or derived data-items should not specify this property, since they have not really been inserted into the system.
          example: 2020-03-05T13:02:42Z
        sameAs:
          type: array
          description: >-
            URL of a reference Web page that unambiguously indicates the item's identity. E.g. the URL of the item's Wikipedia page, Wikidata entry, or official website.
          items:
            type: string
            format: uri
        name:
          type: string
          description: >-
            The canonical name of the item. See also `alternateName`. This name is typically not sufficient to identify the item, though. That's what the `identifier` and `url` are for.
        description:
          type: string
          description: A description of the item
        alternateName:
          oneOf:
            - type: string
              description: An alias for the item. See `name` for its canonical name.
            - type: array
              description: Multiple aliases for the item. See `name` for its canonical name.
              items:
                type: string

    Person:
      allOf:
        - $ref: "#/components/schemas/Thing"
        - type: object
          description: A person (alive, dead, undead, or fictional).
    Organization:
      allOf:
        - $ref: "#/components/schemas/Thing"
        - type: object
          description: An organization such as a school, NGO, corporation, club, etc.
